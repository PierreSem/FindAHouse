# coding: utf8
from shapefile import Reader
from pyproj import Proj, transform
import csv

lambert_93 = Proj("+init=EPSG:2154")
wgs_84 = Proj("+init=EPSG:4326")

def conversion_lambert93_wgs84(limite_lambert):
    '''
    Conversion des coordonnées lambert en WGS84
    Prise en compte des iles et des enclaves
    '''
    nb_points_limite = len(limite_lambert)
    limite_wgs84_tmp = []
    limite_wgs84 = []
    lon_tmp, lat_tmp =  transform(lambert_93, wgs_84, limite_lambert[0][0],\
               limite_lambert[0][1])
    ind_tmp = 0
    limite_wgs84_tmp.append([lon_tmp, lat_tmp])
    for ind, coord in enumerate(limite_lambert):
        lon, lat = transform(lambert_93, wgs_84, coord[0], coord[1])
        if [lon_tmp, lat_tmp] != [lon, lat]:
            limite_wgs84_tmp.append([lon, lat])
        else :
            if ind_tmp == ind:
                pass
            else :
                limite_wgs84.append(limite_wgs84_tmp)
                if ind + 1 < nb_points_limite:
                    lon_tmp, lat_tmp = transform(lambert_93, wgs_84,\
                          limite_lambert[ind+1][0], limite_lambert[ind+1][1])
                    ind_tmp = ind + 1
                    limite_wgs84_tmp = []
    return limite_wgs84

def creer_departement_json(info, limite, coord_centr):
    departement_json = {}
    departement_json["type"] = "Feature"
    departement_json["properties"] = {"numero_departement": info[1],\
            "coordonnee_centroid" : coord_centr}
    departement_json["geometry"] = {"type": "Polygon", "coordinates":  limite}
    departement_json = '"' + str(departement_json) + '"'
    return departement_json

def creer_commune_json(info, limite, coord_centr):
    commune_json = {}
    commune_json["type"] = "Feature"
    commune_json["properties"] = {"numero_commune": info[2], "numero_departement": info[13],\
        "coordonnee_centroid" : coord_centr}
    commune_json["geometry"] = {"type": "Polygon", "coordinates":  limite}
    commune_json = '"' + str(commune_json) + '"'
    return commune_json

def extraction_geofla_departement(chemin):
    sf = Reader(chemin)
    shapeRecs = sf.shapeRecords()
    points = shapeRecs[5].shape.points
    record = shapeRecs[5].record
    liste_departements = []
    for dep in shapeRecs:
        info = dep.record
        code_dep = info[1]
        nom_dep_maj = info[2]
        nom_dep_min = info[2]
        numero_insee_prefecture = info[1] + info[3] 
        x_centroid, y_centroid = transform(lambert_93, wgs_84, info[7], info[8])
        code_reg = info[9]
        limite = conversion_lambert93_wgs84(dep.shape.points)
        limite_dep = creer_departement_json(info, limite, [y_centroid, x_centroid])
        departement = {"code_dep" : code_dep, "nom_dep_maj": nom_dep_maj,\
                       "nom_dep_min" : nom_dep_min, "numero_insee_prefecture" : numero_insee_prefecture,\
                       "x_centroid" : x_centroid, "y_centroid" : y_centroid,\
                       "code_reg" : code_reg, "limite_dep" : limite_dep}
        liste_departements.append(departement)
    return liste_departements

def extraction_geofla_commune(chemin):
    sf = Reader(chemin)
    shapeRecs = sf.shapeRecords()
    points = shapeRecs[5].shape.points
    record = shapeRecs[5].record
    liste_communes = []
    for com in shapeRecs:
        info = com.record
        insee_com = info[2]
        nom_com_maj = info[3]
        nom_com_min = info[3]
        if b"Capitale d'\xe9tat" == info[4]:
            status = "capitale"
        elif b"Pr\xe9fecture de d\xe9partement" == info[4]:
            status = "prefecture_departement"
        elif "Commune simple" == info[4]:
            status = "commune_simple"
        elif b'Sous-pr\xe9fecture' == info[4]:
            status = "sous-prefecture"
        elif b'Pr\xe9fecture de r\xe9gion' == info[4]:
            status = "prefecture_region"
        x_chf_lieu, y_chf_lieu =  transform(lambert_93, wgs_84, info[5], info[6])
        x_centroid, y_centroid =  transform(lambert_93, wgs_84, info[7], info[8])
        z_moyen = info[9]
        superficie = info[10]
        population = info[11]
        code_arr = info[12]
        code_dep = info[13]
        code_reg = info[15]
        limite = conversion_lambert93_wgs84(com.shape.points)
        limite_com = creer_commune_json(info, limite, [y_centroid, x_centroid])
        commune = {"insee_com" : insee_com, "nom_com_maj" : nom_com_maj,\
                   "nom_com_min" : nom_com_min, "status" : status,\
                   "x_chf_lieu" : x_chf_lieu, "y_chf_lieu" : y_chf_lieu,\
                   "x_centroid" : x_centroid, "y_centroid" : y_centroid,\
                   "z_min" : z_moyen, "z_max" : z_moyen,\
                   "z_moyen" : z_moyen, "superficie" : superficie,\
                   "population" : population, "code_arr" : code_arr,\
                   "code_dep" : code_dep, "code_reg" : code_reg,\
                   "limite_com" : limite_com, "code_postal" : insee_com}
        #print(commune)
        liste_communes.append(commune)
    return liste_communes

def extraction_poste(chemin):
    '''Source : https://datanova.legroupe.laposte.fr/explore/dataset/laposte_hexasmal/?disjunctive.code_commune_insee&disjunctive.nom_de_la_commune&disjunctive.code_postal&disjunctive.libell_d_acheminement&disjunctive.ligne_5
    Nom fichier : laposte_hexasmal
    Données :
       nom de la commune
       code INSEE
       précision du lieu dit
       le code postal de la commune
       le libellé acheminement 
       lieu dit
    '''
    sf = Reader(chemin)
    shapeRecs = sf.shapeRecords()
    codes_postaux = []
    for com in shapeRecs:
        info = com.record
        codes_postaux.append(info)
    return codes_postaux

def extraction_csv_communes_france(chemin):
    '''
    Objectif : RECUPERE LES NOMS DES VILLES AVEC LES ACCENTS
    Base de donnees des nom accentues des communes
    http://sql.sh/736-base-donnees-villes-francaises
    Donnees du fichier csv :
    0 : index
    1 : departement
    2 : slug
    3 : nom
    4 : nom simple
    5 : nom reel
    6 : nom soundex
    7 : nom metaphone
    8 : code postal
    9 : numero commune
    10 : conde insee
    11 : arrondissement
    12 : canton
    13 : poulation 2010
    14 : population 1999
    15 : population 1999
    16 : densite 2010
    17 : superficie
    18 : long / lat en degre
    19 : longitude / latitude en grd
    20 : longitude / latitude en dms
    21  : altitude min /max
    '''
    cr = csv.reader(open(chemin, "rt", encoding='utf8'))
    communes_info_suplementaires = []
    for row in cr:
        communes_info_suplementaires.append(row)
    return communes_info_suplementaires

def extraction_csv_departement(chemin):
    '''
    Objectif : RECUPERER LES NOM DES DEPARTEMENTS AVEC LES ACCENTS
    http://sql.sh/1879-base-donnees-departements-francais
    '''
    cr = csv.reader(open(chemin, "rt", encoding='utf8'))
    departements_info_suplementaires = []
    for row in cr:
        departements_info_suplementaires.append(row)
    return departements_info_suplementaires




if __name__ == '__main__':
    #departements = extraction_shp_departement('./data/DEPARTEMENT/DEPARTEMENT')
    #communes = extraction_geofla_commune('./data/COMMUNE/COMMUNE')
    #extraction_poste('./data/POSTE/laposte_hexasmal')
    #extraction_csv_communes_france('./data/villes_france.csv')
    #liste_departements = extraction_geofla_departement('../data/DEPARTEMENT/DEPARTEMENT')
    #for dep in liste_departements:
    #    print(dep["nom_dep_maj"])
    print(extraction_csv_departement('../data/departement.csv'))


